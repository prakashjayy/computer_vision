# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_vis.ipynb.

# %% auto 0
__all__ = ['draw_bbox', 'add_label', 'random_color', 'draw_bbox_with_label', 'vis_annots']

# %% ../nbs/01_vis.ipynb 2
import cv2
import numpy as np 

# %% ../nbs/01_vis.ipynb 11
def draw_bbox(img, bbox, bbox_color: tuple=(255, 0, 0), thickness: int=2, overlay: bool=False, alpha: float=0.5):
    #bbox is is xyxy format
    output = img.copy()
    thickness = -1 if overlay else thickness
    output = cv2.rectangle(output, (bbox[0], bbox[1]), (bbox[2], bbox[3]), bbox_color, thickness)
    if overlay: 
        overlay = img.copy()
        cv2.addWeighted(overlay, alpha, output, 1 - alpha, 0, output)
    return output

# %% ../nbs/01_vis.ipynb 18
def add_label(img, bbox, label, draw_bg=True, text_color=(255, 0, 0), text_bg_color=(255, 255, 255), top=True):
    text_width = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)[0][0]
    tip = +30 if not top else -30 
    label_bg = [bbox[0], bbox[1], bbox[0] + text_width, bbox[1] + tip]
    output = img.copy()
    if draw_bg:cv2.rectangle(output, (label_bg[0], label_bg[1]), (label_bg[2] + 5, label_bg[3]), text_bg_color, -1)
    cv2.putText(output, label, (bbox[0] + 5, bbox[1] - 5 + (30 if tip==30 else 0)), cv2.FONT_HERSHEY_SIMPLEX, 1, text_color, 2)
    return output

# %% ../nbs/01_vis.ipynb 21
def random_color():
    c = (np.random.random((1, 3))*0.6+0.4).tolist()[0]
    c = (np.asarray(c)*255).astype(int)
    return c.tolist()

# %% ../nbs/01_vis.ipynb 23
def draw_bbox_with_label(img, bbox, label, overlay=True):
    img = img.copy()
    img = draw_bbox(img, bbox, bbox_color=random_color(), overlay=overlay)
    img = add_label(img, bbox, label, text_color=(0, 0, 0))
    return img

# %% ../nbs/01_vis.ipynb 25
def vis_annots(img, bboxes, labels, overlay=True):
    for bbox, label in zip(bboxes, labels): img = draw_bbox_with_label(img, bbox, label, overlay=overlay)
    return img
